{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"\u4e3b\u9875"},{"location":"about/","text":"","title":"\u5173\u4e8e"},{"location":"backtracking/","text":"\u56de\u6eaf\u6cd5 # Title Difficulty Marks 17_\u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 M 22_\u62ec\u53f7\u751f\u6210 M 39_\u7ec4\u5408\u603b\u548c M 46_\u5168\u6392\u5217 M 78_\u5b50\u96c6 M 79_\u5355\u8bcd\u641c\u7d22 M","title":"\u6982\u89c8"},{"location":"backtracking/#_1","text":"Title Difficulty Marks 17_\u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 M 22_\u62ec\u53f7\u751f\u6210 M 39_\u7ec4\u5408\u603b\u548c M 46_\u5168\u6392\u5217 M 78_\u5b50\u96c6 M 79_\u5355\u8bcd\u641c\u7d22 M","title":"\u56de\u6eaf\u6cd5"},{"location":"binary_search/","text":"\u4e8c\u5206\u67e5\u627e # Title Difficulty Marks 4_\u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 H 33_\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 M 34_\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e M 240_\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II M 287_\u5bfb\u627e\u91cd\u590d\u6570 M","title":"\u6982\u89c8"},{"location":"binary_search/#_1","text":"Title Difficulty Marks 4_\u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 H 33_\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 M 34_\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e M 240_\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II M 287_\u5bfb\u627e\u91cd\u590d\u6570 M","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"binary_tree/","text":"\u4e8c\u53c9\u6811 # Title Difficulty Marks 94_\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 E 98_\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 M array 101_\u5bf9\u79f0\u4e8c\u53c9\u6811 E 102_\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 M 104_\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6 E 105_\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 M 114_\u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868 M 124_\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c H 226_\u7ffb\u8f6c\u4e8c\u53c9\u6811 E 236_\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 M 297_\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316 H BFS, DFS 301_\u5220\u9664\u65e0\u6548\u7684\u62ec\u53f7 H backtracking 437_\u8def\u5f84\u603b\u548c III M tree 538_\u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811 M DFS 543_\u4e8c\u53c9\u6811\u7684\u76f4\u5f84 E DFS 617_\u5408\u5e76\u4e8c\u53c9\u6811 E BFS, DFS","title":"\u6982\u89c8"},{"location":"binary_tree/#_1","text":"Title Difficulty Marks 94_\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 E 98_\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 M array 101_\u5bf9\u79f0\u4e8c\u53c9\u6811 E 102_\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 M 104_\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6 E 105_\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 M 114_\u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868 M 124_\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c H 226_\u7ffb\u8f6c\u4e8c\u53c9\u6811 E 236_\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 M 297_\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316 H BFS, DFS 301_\u5220\u9664\u65e0\u6548\u7684\u62ec\u53f7 H backtracking 437_\u8def\u5f84\u603b\u548c III M tree 538_\u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811 M DFS 543_\u4e8c\u53c9\u6811\u7684\u76f4\u5f84 E DFS 617_\u5408\u5e76\u4e8c\u53c9\u6811 E BFS, DFS","title":"\u4e8c\u53c9\u6811"},{"location":"divide_and_conquer/","text":"\u5206\u6cbb\u6cd5 # Title Difficulty Marks 169_\u591a\u6570\u5143\u7d20 E hash_table, sorting 215_\u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 M heap","title":"\u6982\u89c8"},{"location":"divide_and_conquer/#_1","text":"Title Difficulty Marks 169_\u591a\u6570\u5143\u7d20 E hash_table, sorting 215_\u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 M heap","title":"\u5206\u6cbb\u6cd5"},{"location":"dynamic_programming/","text":"\u57fa\u672c\u65b9\u6cd5 # \u52a8\u6001\u89c4\u5212\u7684\u7684\u56db\u4e2a\u89e3\u9898\u6b65\u9aa4\u662f\uff1a \u5b9a\u4e49\u5b50\u95ee\u9898: DP \u6570\u7ec4\u53ca\u4e0b\u6807\u7684\u542b\u4e49 DP \u6570\u7ec4\u521d\u59cb\u5316 \u5199\u51fa\u5b50\u95ee\u9898\u7684\u9012\u63a8\u5173\u7cfb \u786e\u5b9a DP \u6570\u7ec4\u7684\u8ba1\u7b97\u987a\u5e8f \u7a7a\u95f4\u4f18\u5316\uff08\u53ef\u9009\uff09 \u76f8\u5173\u9898\u76ee # Title Difficulty Marks \u2705 5_\u6700\u957f\u56de\u6587\u5b50\u4e32 M 10_\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d H \u2705 32_\u6700\u957f\u7684\u6709\u6548\u62ec\u53f7 H stack \u2705 53_\u6700\u5927\u5b50\u6570\u7ec4\u548c M \u2705 62_\u4e0d\u540c\u8def\u5f84 M \u2705 63_\u4e0d\u540c\u8def\u5f84 II M \u2705 64_\u6700\u5c0f\u8def\u5f84\u548c M \u270570_\u722c\u697c\u68af E 72_\u7f16\u8f91\u8ddd\u79bb H \u270585_\u6700\u5927\u77e9\u5f62 H 96_\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 M \u2705 121_\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a E 139_\u5355\u8bcd\u62c6\u5206 M \u2705 152_\u4e58\u79ef\u6700\u5927\u5b50\u6570\u7ec4 M \u2705 198_\u6253\u5bb6\u52ab\u820d M \u2705 221_\u6700\u5927\u6b63\u65b9\u5f62 M 279_\u5b8c\u5168\u5e73\u65b9\u6570 M \u2705 300_\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 M 309_\u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f M 312_\u6233\u6c14\u7403 H 322_\u96f6\u94b1\u5151\u6362 M BFS 337_\u6253\u5bb6\u52ab\u820dIII M DFS, binary-tree 338_\u6bd4\u7279\u4f4d\u8ba1\u6570 E 416_\u5206\u5272\u7b49\u548c\u5b50\u96c6 M 494_\u76ee\u6807\u548c M backtracking 647_\u56de\u6587\u5b50\u4e32 M","title":"\u6982\u89c8"},{"location":"dynamic_programming/#_1","text":"\u52a8\u6001\u89c4\u5212\u7684\u7684\u56db\u4e2a\u89e3\u9898\u6b65\u9aa4\u662f\uff1a \u5b9a\u4e49\u5b50\u95ee\u9898: DP \u6570\u7ec4\u53ca\u4e0b\u6807\u7684\u542b\u4e49 DP \u6570\u7ec4\u521d\u59cb\u5316 \u5199\u51fa\u5b50\u95ee\u9898\u7684\u9012\u63a8\u5173\u7cfb \u786e\u5b9a DP \u6570\u7ec4\u7684\u8ba1\u7b97\u987a\u5e8f \u7a7a\u95f4\u4f18\u5316\uff08\u53ef\u9009\uff09","title":"\u57fa\u672c\u65b9\u6cd5"},{"location":"dynamic_programming/#_2","text":"Title Difficulty Marks \u2705 5_\u6700\u957f\u56de\u6587\u5b50\u4e32 M 10_\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d H \u2705 32_\u6700\u957f\u7684\u6709\u6548\u62ec\u53f7 H stack \u2705 53_\u6700\u5927\u5b50\u6570\u7ec4\u548c M \u2705 62_\u4e0d\u540c\u8def\u5f84 M \u2705 63_\u4e0d\u540c\u8def\u5f84 II M \u2705 64_\u6700\u5c0f\u8def\u5f84\u548c M \u270570_\u722c\u697c\u68af E 72_\u7f16\u8f91\u8ddd\u79bb H \u270585_\u6700\u5927\u77e9\u5f62 H 96_\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 M \u2705 121_\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a E 139_\u5355\u8bcd\u62c6\u5206 M \u2705 152_\u4e58\u79ef\u6700\u5927\u5b50\u6570\u7ec4 M \u2705 198_\u6253\u5bb6\u52ab\u820d M \u2705 221_\u6700\u5927\u6b63\u65b9\u5f62 M 279_\u5b8c\u5168\u5e73\u65b9\u6570 M \u2705 300_\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 M 309_\u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f M 312_\u6233\u6c14\u7403 H 322_\u96f6\u94b1\u5151\u6362 M BFS 337_\u6253\u5bb6\u52ab\u820dIII M DFS, binary-tree 338_\u6bd4\u7279\u4f4d\u8ba1\u6570 E 416_\u5206\u5272\u7b49\u548c\u5b50\u96c6 M 494_\u76ee\u6807\u548c M backtracking 647_\u56de\u6587\u5b50\u4e32 M","title":"\u76f8\u5173\u9898\u76ee"},{"location":"dynamic_programming/buy_and_sell_stock/","text":"How to buy and sell stocks #","title":"\u80a1\u7968\u95ee\u9898"},{"location":"dynamic_programming/buy_and_sell_stock/#how-to-buy-and-sell-stocks","text":"","title":"How to buy and sell stocks"},{"location":"dynamic_programming/house_robber/","text":"","title":"\u6253\u5bb6\u52ab\u820d"},{"location":"dynamic_programming/knapsack_problem/","text":"\u80cc\u5305\u95ee\u9898 (knapsack problem) \u662f\u4e00\u79cd \u7ec4\u5408\u4f18\u5316 \u7684 NP \u5b8c\u5168 \u95ee\u9898\u3002 \u5efa\u6a21 # \u5047\u5b9a\u6211\u4eec\u6709 N N \u79cd\u7269\u54c1, \u6bcf\u79cd\u7269\u54c1\u7684\u91cd\u91cf\u4e3a w_i w_i , \u4ef7\u683c\u4e3a p_i p_i , \u80cc\u5305\u6240\u80fd\u88c5\u8f7d\u7684\u6700\u5927\u91cd\u91cf\u4e3a W W , x_i x_i \u662f\u88c5\u5165\u80cc\u5305\u7684\u7b2c i i \u4e2a\u7269\u54c1\u7684\u4e2a\u6570, \u516c\u5f0f\u5316\u8868\u8ff0 0-1 \u80cc\u5305\u95ee\u9898 : \u6bcf\u79cd\u7269\u54c1\u53ea\u80fd\u9009\u62e9 0 \u4e2a\u6216\u8005 1 \u4e2a \\max{\\sum_{i=1}^N} x_i p_i \\quad s.t. \\; \\sum_{i=1}^N x_i w_i \\leq W, \\; x_i \\in \\{0, 1\\} \\max{\\sum_{i=1}^N} x_i p_i \\quad s.t. \\; \\sum_{i=1}^N x_i w_i \\leq W, \\; x_i \\in \\{0, 1\\} \u6709\u754c\u80cc\u5305\u95ee\u9898 : \u6bcf\u79cd\u7269\u54c1\u6700\u591a\u53ea\u80fd\u9009\u62e9 b_j b_j \u4e2a \\max{\\sum_{i=1}^N} x_i p_i \\quad s.t. \\; \\sum_{i=1}^N x_i w_i \\leq W, \\; x_i \\in \\{0, 1, \\cdots , b_j\\} \\max{\\sum_{i=1}^N} x_i p_i \\quad s.t. \\; \\sum_{i=1}^N x_i w_i \\leq W, \\; x_i \\in \\{0, 1, \\cdots , b_j\\} \u65e0\u754c\u80cc\u5305\u95ee\u9898 : \u53c8\u79f0\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff0c\u4e0d\u9650\u5b9a\u6bcf\u79cd\u7269\u54c1\u7684\u6570\u91cf \\max{\\sum_{i=1}^N} x_i p_i \\quad s.t. \\; \\sum_{i=1}^N x_i w_i \\leq W, \\; x_i \\in \\{0, 1, \\cdots , \\infty \\} \\max{\\sum_{i=1}^N} x_i p_i \\quad s.t. \\; \\sum_{i=1}^N x_i w_i \\leq W, \\; x_i \\in \\{0, 1, \\cdots , \\infty \\}","title":"\u80cc\u5305\u95ee\u9898"},{"location":"dynamic_programming/knapsack_problem/#_1","text":"\u5047\u5b9a\u6211\u4eec\u6709 N N \u79cd\u7269\u54c1, \u6bcf\u79cd\u7269\u54c1\u7684\u91cd\u91cf\u4e3a w_i w_i , \u4ef7\u683c\u4e3a p_i p_i , \u80cc\u5305\u6240\u80fd\u88c5\u8f7d\u7684\u6700\u5927\u91cd\u91cf\u4e3a W W , x_i x_i \u662f\u88c5\u5165\u80cc\u5305\u7684\u7b2c i i \u4e2a\u7269\u54c1\u7684\u4e2a\u6570, \u516c\u5f0f\u5316\u8868\u8ff0 0-1 \u80cc\u5305\u95ee\u9898 : \u6bcf\u79cd\u7269\u54c1\u53ea\u80fd\u9009\u62e9 0 \u4e2a\u6216\u8005 1 \u4e2a \\max{\\sum_{i=1}^N} x_i p_i \\quad s.t. \\; \\sum_{i=1}^N x_i w_i \\leq W, \\; x_i \\in \\{0, 1\\} \\max{\\sum_{i=1}^N} x_i p_i \\quad s.t. \\; \\sum_{i=1}^N x_i w_i \\leq W, \\; x_i \\in \\{0, 1\\} \u6709\u754c\u80cc\u5305\u95ee\u9898 : \u6bcf\u79cd\u7269\u54c1\u6700\u591a\u53ea\u80fd\u9009\u62e9 b_j b_j \u4e2a \\max{\\sum_{i=1}^N} x_i p_i \\quad s.t. \\; \\sum_{i=1}^N x_i w_i \\leq W, \\; x_i \\in \\{0, 1, \\cdots , b_j\\} \\max{\\sum_{i=1}^N} x_i p_i \\quad s.t. \\; \\sum_{i=1}^N x_i w_i \\leq W, \\; x_i \\in \\{0, 1, \\cdots , b_j\\} \u65e0\u754c\u80cc\u5305\u95ee\u9898 : \u53c8\u79f0\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff0c\u4e0d\u9650\u5b9a\u6bcf\u79cd\u7269\u54c1\u7684\u6570\u91cf \\max{\\sum_{i=1}^N} x_i p_i \\quad s.t. \\; \\sum_{i=1}^N x_i w_i \\leq W, \\; x_i \\in \\{0, 1, \\cdots , \\infty \\} \\max{\\sum_{i=1}^N} x_i p_i \\quad s.t. \\; \\sum_{i=1}^N x_i w_i \\leq W, \\; x_i \\in \\{0, 1, \\cdots , \\infty \\}","title":"\u5efa\u6a21"},{"location":"dynamic_programming/subsequence/","text":"53_\u6700\u5927\u5b50\u6570\u7ec4\u548c # \u9898\u76ee # \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u8bf7\u4f60\u627e\u51fa\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002 \u6ce8: \u5b50\u6570\u7ec4\u662f\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u8fde\u7eed\u90e8\u5206\u3002 \u793a\u4f8b: 1 2 3 \u8f93\u5165\uff1anums = [-2,1,-3,4,-1,2,1,-5,4] \u8f93\u51fa\uff1a6 \u89e3\u91ca\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4 [4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a 6\u3002 \u89e3\u6790 # \u5b9a\u4e49\u5b50\u95ee\u9898 : dp[i]: \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e \u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u6700\u5927\u548c \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b : \u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba, \\begin{equation*} dp[i]=\\left\\{ \\begin{aligned} dp[i - 1] + nums[i]&, & dp[i - 1] \\geq 0, \\\\ nums[i] &, & dp[i - 1] < 0. \\end{aligned} \\right. \\end{equation*} \\begin{equation*} dp[i]=\\left\\{ \\begin{aligned} dp[i - 1] + nums[i]&, & dp[i - 1] \\geq 0, \\\\ nums[i] &, & dp[i - 1] < 0. \\end{aligned} \\right. \\end{equation*} \u4e0a\u5f0f\u53ef\u4ee5\u5408\u5e76\u4e3a\u4e00\u4e2a\u516c\u5f0f dp[i]=\\max(dp[i-1] + nums[i], nums[i]) dp[i]=\\max(dp[i-1] + nums[i], nums[i]) \u521d\u59cb\u503c : dp[0] = nums[0] \u4f18\u5316\u7a7a\u95f4 : \u5168\u90e8\u4fdd\u5b58 DP \u6570\u7ec4\u6ca1\u6709\u5fc5\u8981, \u53ea\u7528\u5b58\u50a8 dp[i-1] \u548c dp[i] \u5c31\u53ef\u4ee5\u3002 \u4f9d\u636e\u5982\u4e0a\u5206\u6790\u53ef\u4ee5\u5199\u51fa\u6700\u539f\u59cb\u7684 DP \u4ee3\u7801 \u7a7a\u95f4\u4f18\u5316\u524d \u7a7a\u95f4\u4f18\u5316\u540e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def maxSubArray ( self , nums : List [ int ]) -> int : \"\"\" 1. DP \u5b9a\u4e49: dp[i] \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c 2. \u9012\u63a8\u516c\u5f0f: dp[i] = max(dp[i - 1] + nums[i], nums[i]) 3. DP \u521d\u59cb\u5316: dp[0] = nums[0] \"\"\" dp = [ 0 ] * len ( nums ) dp [ 0 ] = nums [ 0 ] max_val = dp [ 0 ] for i in range ( 1 , len ( nums )): dp [ i ] = max ( dp [ i - 1 ] + nums [ i ], nums [ i ]) if max_val < dp [ i ]: max_val = dp [ i ] return max_val 1 2 3 4 5 6 7 8 9 10 11 12 def maxSubArray ( self , nums : List [ int ]) -> int : \"\"\" \u5b9a\u4e49 prev, curr = dp[i - 1], dp[i] \"\"\" prev = nums [ 0 ] max_subsum = prev for num in nums [ 1 :]: curr = max ( prev + num , num ) prev = curr if max_subsum < curr : max_subsum = curr return max_val 152_\u4e58\u79ef\u6700\u5927\u5b50\u6570\u7ec4 # \u9898\u76ee # \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u8bf7\u4f60\u627e\u51fa\u6570\u7ec4\u4e2d\u4e58\u79ef\u6700\u5927\u7684\u975e\u7a7a\u8fde\u7eed\u5b50\u6570\u7ec4(\u8be5\u5b50\u6570\u7ec4\u4e2d\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u6570\u5b57)\uff0c\u5e76\u8fd4\u56de\u8be5\u5b50\u6570\u7ec4\u6240\u5bf9\u5e94\u7684\u4e58\u79ef\u3002 \u793a\u4f8b: 1 2 3 \u8f93\u5165: nums = [2,3,-2,4] \u8f93\u51fa: 6 \u89e3\u91ca: \u5b50\u6570\u7ec4 [2,3] \u6709\u6700\u5927\u4e58\u79ef 6\u3002 \u89e3\u6790 # \u57fa\u672c\u7684\u89e3\u9898\u601d\u8def\u540c 53_\u6700\u5927\u5b50\u6570\u7ec4\u548c , \u4f46\u9700\u8981\u8003\u8651 nums[i] \u4e2d\u5206\u522b\u4e3a\u6b63\u6570\u548c\u8d1f\u6570\u7684\u60c5\u5f62\u3002 1. \u82e5 nums[i] < 0, \u4e14\u5176\u524d\u67d0\u6bb5\u8fde\u7eed\u5b50\u6570\u7ec4\u4e4b\u79ef\u4e5f\u4e3a\u8d1f\u6570\uff0c\u5219\u8d1f\u7684\u7edd\u5bf9\u503c\u8d8a\u5927\uff0c\u5219\u5176\u79ef\u8d8a\u5927; 2. \u82e5 nums[i] > 0, \u5219\u671f\u671b\u5176\u524d\u67d0\u6bb5\u8fde\u7eed\u5b50\u6570\u7ec4\u4e4b\u79ef\u4e5f\u4e3a\u6b63\u6570\uff0c\u6b63\u5f97\u8d8a\u5927\uff0c\u5176\u79ef\u8d8a\u5927\u3002 \u56e0\u6b64, \u9700\u8981\u5b9a\u4e49\u4e24\u4e2a DP, \u5373 DP_{max} DP_{max} : \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u79ef\u7684\u6700\u5927\u503c\uff1b DP_{min} DP_{min} : \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u79ef\u7684\u6700\u5c0f\u503c. \u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 def maxProduct ( self , nums : List [ int ]) -> int : prev_max = nums [ 0 ] prev_min = nums [ 0 ] res = nums [ 0 ] for num in nums [ 1 :]: curr_max = max ( prev_max * num , prev_min * num , num ) curr_min = min ( prev_max * num , prev_min * num , num ) res = max ( curr_max , res ) prev_max = curr_max prev_min = curr_min return res 300_\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 # \u9898\u76ee # \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u8bf4\u660e: \u5b50\u5e8f\u5217\u662f\u7531\u6570\u7ec4\u6d3e\u751f\u800c\u6765\u7684\u5e8f\u5217\uff0c\u5220\u9664\uff08\u6216\u4e0d\u5220\u9664\uff09\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u800c\u4e0d\u6539\u53d8\u5176\u4f59\u5143\u7d20\u7684\u987a\u5e8f\u3002\u4f8b\u5982\uff0c[3,6,2,7] \u662f\u6570\u7ec4 [0,3,1,6,2,2,7] \u7684\u5b50\u5e8f\u5217\u3002 \u793a\u4f8b: 1 2 3 \u8f93\u5165\uff1anums = [10,9,2,5,3,7,101,18] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u662f [2,3,7,101]\uff0c\u56e0\u6b64\u957f\u5ea6\u4e3a 4 \u3002 \u89e3\u6790 # \u57fa\u7840\u89e3\u6cd5\uff1a\u52a8\u6001\u89c4\u5212 # \u72b6\u6001\u5b9a\u4e49 : dp[i] \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6; \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b : \u5f53 nums[i] > nums[j] nums[i] > nums[j] \u65f6, dp[i] = \\max(dp[j] + 1, dp[i]), j \\in [0, i) dp[i] = \\max(dp[j] + 1, dp[i]), j \\in [0, i) , \u5176\u4e2d j<i j<i ; \u4e5f\u5373\u662f\u8bf4, \u9700 nums[i] > nums[j] nums[i] > nums[j] \u65f6, \u624d\u80fd\u5c06 nums[i] nums[i] \u653e\u5230 nums[0...j] nums[0...j] \u540e\u9762\u5f62\u6210\u4e0a\u5347\u5b50\u5e8f\u5217 ; \u521d\u59cb\u72b6\u6001 : dp[i] \u6240\u6709\u5143\u7d20\u7f6e 11\uff0c\u542b\u4e49\u662f\u6bcf\u4e2a\u5143\u7d20\u90fd\u81f3\u5c11\u53ef\u4ee5\u5355\u72ec\u6210\u4e3a\u5b50\u5e8f\u5217\uff0c\u6b64\u65f6\u957f\u5ea6\u90fd\u4e3a 1. 1 2 3 4 5 6 7 8 9 10 11 12 13 def lengthOfLIS ( self , nums : List [ int ]) -> int : \"\"\" dp[i]: \u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 \"\"\" result = 0 dp = [ 1 ] * len ( nums ) for i , num in enumerate ( nums ): # \u5bf9\u4e8e\u6bcf\u4e2a nums[i], \u9700\u4ece\u5934\u5f00\u59cb\u904d\u5386 for j in range ( i ): if nums [ i ] > nums [ j ]: dp [ i ] = max ( dp [ j ] + 1 , dp [ i ]) result = max ( dp [ i ], result ) return result \u664b\u7ea7\u89e3\u6cd5: \u52a8\u6001\u89c4\u5212 + \u4e8c\u5206\u67e5\u627e # \u6838\u5fc3\u601d\u60f3 : \u4e3a\u4e86\u627e\u5230 nums[i] nums[i] \u4e4b\u524d\u7684\u4e0a\u5347\u5b50\u5e8f\u5217, \u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a \u5347\u5e8f \u6570\u7ec4 ascend_arr \u5b58\u653e\u4e0a\u5347\u5b50\u5e8f\u5217, \u8d8a\u5c0f\u7684\u6570\u5b57\u8d8a\u5f80\u524d\u653e\uff0c\u8fd9\u6837\u540e\u9762\u5c31\u4f1a\u6709\u66f4\u591a\u7684\u6570\u5b57\u53ef\u4ee5\u52a0\u5165\u8be5\u6570\u7ec4\u4e2d\u3002 \u5177\u4f53\u64cd\u4f5c\u662f: \u5982\u679c nums[i] \u6bd4 ascend_arr[-1] \u5927, \u5219\u8ffd\u52a0\u81f3 ascend_arr \u672b\u5c3e; \u8d1f\u8d23\u8986\u76d6\u7b2c\u4e00\u4e2a\u521a\u597d\u4e0d\u5c0f\u4e8e nums[i] \u7684\u6570\u5b57\u3002\u57fa\u672c\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def lengthOfLIS ( self , nums : List [ int ]) -> int : res = 1 ascend_arr = [ nums [ 0 ]] # \u6709\u5e8f\u4e0a\u5347\u6570\u7ec4 for num in nums [ 1 :]: if num > ascend_arr [ - 1 ]: # \u8ffd\u52a0 ascend_arr . append ( num ) else : # \u8986\u76d6\u7b2c\u4e00\u4e2a\u521a\u597d\u4e0d\u5c0f\u4e8e num \u7684\u6570\u5b57 for idx in range ( len ( ascend_arr ))[:: - 1 ]: if ascend_arr [ idx ] < num : break if idx == 0 and ascend_arr [ 0 ] >= num : idx -= 1 ascend_arr [ idx + 1 ] = num return len ( ascend_arr ) \u5982 nums = [100, 90, 1, 20, 30, 40, 80, 2, 3, 4, 5, 6], \u6bcf\u4e00\u6b65\u64cd\u4f5c\u540e\u7684 ascend_arr \u7684\u60c5\u5f62\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 [100] [90] (90 < 100, \u66ff\u6362) [1] (1 < 90, \u66ff\u6362) [1, 20] (20 > 1, \u8ffd\u52a0) [1, 20, 30] (30 > 20, \u8ffd\u52a0) [1, 20, 30, 40] (40 > 30, \u8ffd\u52a0) [1, 20, 30, 40, 80] (80 > 40, \u8ffd\u52a0) [1, 2, 30, 40, 80] ( 1 < 2 < 20, \u66ff\u6362 20) [1, 2, 3, 40, 80] ( 2 < 3 < 30, \u66ff\u6362 30) [1, 2, 3, 4, 80] ( 3 < 4 < 40, \u66ff\u6362 40 ) [1, 2, 3, 4, 5] ( 4 < 5 < 80, \u66ff\u6362 80 ) [1, 2, 3, 4, 5, 6] (6 > 5, \u8ffd\u52a0) \u66f4\u8fdb\u4e00\u6b65, \u7531\u4e8e ascend_arr \u662f\u6709\u5e8f\u4e0a\u5347\u6570\u7ec4, \u5219\u53ef\u4ee5\u5c06\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u8986\u76d6\u7684\u64cd\u4f5c\u4f18\u5316\u4e3a\u4e8c\u5206\u67e5\u627e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def lengthOfLIS ( self , nums : List [ int ]) -> int : # \u5b9a\u4e49\u6709\u5e8f\u4e0a\u5347\u6570\u7ec4 ascend_arr = [ nums [ 0 ]] for num in nums [ 1 :]: if num > ascend_arr [ - 1 ]: # \u8ffd\u52a0 ascend_arr . append ( num ) else : # \u8986\u76d6\u7b2c\u4e00\u4e2a\u521a\u597d\u4e0d\u5c0f\u4e8e num \u7684\u6570\u5b57 l , r = 0 , len ( ascend_arr ) - 1 while l < r : mid = ( l + r ) // 2 if ascend_arr [ mid ] < num : l = mid + 1 else : r = mid ascend_arr [ l ] = num return len ( ascend_arr )","title":"\u5b50\u5e8f\u5217\u95ee\u9898"},{"location":"dynamic_programming/subsequence/#53_","text":"","title":"53_\u6700\u5927\u5b50\u6570\u7ec4\u548c"},{"location":"dynamic_programming/subsequence/#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u8bf7\u4f60\u627e\u51fa\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002 \u6ce8: \u5b50\u6570\u7ec4\u662f\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u8fde\u7eed\u90e8\u5206\u3002 \u793a\u4f8b: 1 2 3 \u8f93\u5165\uff1anums = [-2,1,-3,4,-1,2,1,-5,4] \u8f93\u51fa\uff1a6 \u89e3\u91ca\uff1a\u8fde\u7eed\u5b50\u6570\u7ec4 [4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a 6\u3002","title":"\u9898\u76ee"},{"location":"dynamic_programming/subsequence/#_2","text":"\u5b9a\u4e49\u5b50\u95ee\u9898 : dp[i]: \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e \u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u6700\u5927\u548c \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b : \u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba, \\begin{equation*} dp[i]=\\left\\{ \\begin{aligned} dp[i - 1] + nums[i]&, & dp[i - 1] \\geq 0, \\\\ nums[i] &, & dp[i - 1] < 0. \\end{aligned} \\right. \\end{equation*} \\begin{equation*} dp[i]=\\left\\{ \\begin{aligned} dp[i - 1] + nums[i]&, & dp[i - 1] \\geq 0, \\\\ nums[i] &, & dp[i - 1] < 0. \\end{aligned} \\right. \\end{equation*} \u4e0a\u5f0f\u53ef\u4ee5\u5408\u5e76\u4e3a\u4e00\u4e2a\u516c\u5f0f dp[i]=\\max(dp[i-1] + nums[i], nums[i]) dp[i]=\\max(dp[i-1] + nums[i], nums[i]) \u521d\u59cb\u503c : dp[0] = nums[0] \u4f18\u5316\u7a7a\u95f4 : \u5168\u90e8\u4fdd\u5b58 DP \u6570\u7ec4\u6ca1\u6709\u5fc5\u8981, \u53ea\u7528\u5b58\u50a8 dp[i-1] \u548c dp[i] \u5c31\u53ef\u4ee5\u3002 \u4f9d\u636e\u5982\u4e0a\u5206\u6790\u53ef\u4ee5\u5199\u51fa\u6700\u539f\u59cb\u7684 DP \u4ee3\u7801 \u7a7a\u95f4\u4f18\u5316\u524d \u7a7a\u95f4\u4f18\u5316\u540e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def maxSubArray ( self , nums : List [ int ]) -> int : \"\"\" 1. DP \u5b9a\u4e49: dp[i] \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c 2. \u9012\u63a8\u516c\u5f0f: dp[i] = max(dp[i - 1] + nums[i], nums[i]) 3. DP \u521d\u59cb\u5316: dp[0] = nums[0] \"\"\" dp = [ 0 ] * len ( nums ) dp [ 0 ] = nums [ 0 ] max_val = dp [ 0 ] for i in range ( 1 , len ( nums )): dp [ i ] = max ( dp [ i - 1 ] + nums [ i ], nums [ i ]) if max_val < dp [ i ]: max_val = dp [ i ] return max_val 1 2 3 4 5 6 7 8 9 10 11 12 def maxSubArray ( self , nums : List [ int ]) -> int : \"\"\" \u5b9a\u4e49 prev, curr = dp[i - 1], dp[i] \"\"\" prev = nums [ 0 ] max_subsum = prev for num in nums [ 1 :]: curr = max ( prev + num , num ) prev = curr if max_subsum < curr : max_subsum = curr return max_val","title":"\u89e3\u6790"},{"location":"dynamic_programming/subsequence/#152_","text":"","title":"152_\u4e58\u79ef\u6700\u5927\u5b50\u6570\u7ec4"},{"location":"dynamic_programming/subsequence/#_3","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u8bf7\u4f60\u627e\u51fa\u6570\u7ec4\u4e2d\u4e58\u79ef\u6700\u5927\u7684\u975e\u7a7a\u8fde\u7eed\u5b50\u6570\u7ec4(\u8be5\u5b50\u6570\u7ec4\u4e2d\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u6570\u5b57)\uff0c\u5e76\u8fd4\u56de\u8be5\u5b50\u6570\u7ec4\u6240\u5bf9\u5e94\u7684\u4e58\u79ef\u3002 \u793a\u4f8b: 1 2 3 \u8f93\u5165: nums = [2,3,-2,4] \u8f93\u51fa: 6 \u89e3\u91ca: \u5b50\u6570\u7ec4 [2,3] \u6709\u6700\u5927\u4e58\u79ef 6\u3002","title":"\u9898\u76ee"},{"location":"dynamic_programming/subsequence/#_4","text":"\u57fa\u672c\u7684\u89e3\u9898\u601d\u8def\u540c 53_\u6700\u5927\u5b50\u6570\u7ec4\u548c , \u4f46\u9700\u8981\u8003\u8651 nums[i] \u4e2d\u5206\u522b\u4e3a\u6b63\u6570\u548c\u8d1f\u6570\u7684\u60c5\u5f62\u3002 1. \u82e5 nums[i] < 0, \u4e14\u5176\u524d\u67d0\u6bb5\u8fde\u7eed\u5b50\u6570\u7ec4\u4e4b\u79ef\u4e5f\u4e3a\u8d1f\u6570\uff0c\u5219\u8d1f\u7684\u7edd\u5bf9\u503c\u8d8a\u5927\uff0c\u5219\u5176\u79ef\u8d8a\u5927; 2. \u82e5 nums[i] > 0, \u5219\u671f\u671b\u5176\u524d\u67d0\u6bb5\u8fde\u7eed\u5b50\u6570\u7ec4\u4e4b\u79ef\u4e5f\u4e3a\u6b63\u6570\uff0c\u6b63\u5f97\u8d8a\u5927\uff0c\u5176\u79ef\u8d8a\u5927\u3002 \u56e0\u6b64, \u9700\u8981\u5b9a\u4e49\u4e24\u4e2a DP, \u5373 DP_{max} DP_{max} : \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u79ef\u7684\u6700\u5927\u503c\uff1b DP_{min} DP_{min} : \u8868\u793a\u4ee5 nums[i] \u7ed3\u5c3e\u7684\u79ef\u7684\u6700\u5c0f\u503c. \u4ee3\u7801\u5982\u4e0b: 1 2 3 4 5 6 7 8 9 10 11 def maxProduct ( self , nums : List [ int ]) -> int : prev_max = nums [ 0 ] prev_min = nums [ 0 ] res = nums [ 0 ] for num in nums [ 1 :]: curr_max = max ( prev_max * num , prev_min * num , num ) curr_min = min ( prev_max * num , prev_min * num , num ) res = max ( curr_max , res ) prev_max = curr_max prev_min = curr_min return res","title":"\u89e3\u6790"},{"location":"dynamic_programming/subsequence/#300_","text":"","title":"300_\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217"},{"location":"dynamic_programming/subsequence/#_5","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u8bf4\u660e: \u5b50\u5e8f\u5217\u662f\u7531\u6570\u7ec4\u6d3e\u751f\u800c\u6765\u7684\u5e8f\u5217\uff0c\u5220\u9664\uff08\u6216\u4e0d\u5220\u9664\uff09\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u800c\u4e0d\u6539\u53d8\u5176\u4f59\u5143\u7d20\u7684\u987a\u5e8f\u3002\u4f8b\u5982\uff0c[3,6,2,7] \u662f\u6570\u7ec4 [0,3,1,6,2,2,7] \u7684\u5b50\u5e8f\u5217\u3002 \u793a\u4f8b: 1 2 3 \u8f93\u5165\uff1anums = [10,9,2,5,3,7,101,18] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u662f [2,3,7,101]\uff0c\u56e0\u6b64\u957f\u5ea6\u4e3a 4 \u3002","title":"\u9898\u76ee"},{"location":"dynamic_programming/subsequence/#_6","text":"","title":"\u89e3\u6790"},{"location":"dynamic_programming/substring/","text":"32_\u6700\u957f\u7684\u6709\u6548\u62ec\u53f7 # \u9898\u76ee # \u7ed9\u4f60\u4e00\u4e2a\u53ea\u5305\u542b '(' \u548c ')' \u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u6709\u6548\uff08\u683c\u5f0f\u6b63\u786e\u4e14\u8fde\u7eed\uff09\u62ec\u53f7\u5b50\u4e32\u7684\u957f\u5ea6\u3002 \u793a\u4f8b1 \u8f93\u5165\uff1as = \") ()() )\" \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u662f \"()()\" \u793a\u4f8b2 \u8f93\u5165: \") ()() ) ()() (\" \u8f93\u51fa: 4 \u89e3\u91ca: \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u662f \" ()() \" \u89e3\u6790 # \u89e3\u6cd5 1: \u6808 # \u62ec\u53f7\u5339\u914d\u95ee\u9898\u901a\u5e38\u60f3\u5230\u7684\u89e3\u6cd5\u662f\u4f7f\u7528\u6808\uff0c\u672c\u9898\u4e2d\u9700\u8981\u6ce8\u610f\u7684\u51e0\u70b9: \u6808\u4fdd\u5b58\u7684\u662f\u62ec\u53f7\u5bf9\u5e94\u7684 \u7d22\u5f15 , \u800c\u4e0d\u662f\u62ec\u53f7\u672c\u8eab; \u6808\u9700\u9884\u7f6e -1 \u4f5c\u4e3a\u53c2\u7167\uff1b \u7d22\u5f15\u51fa\u6808\u540e\u9700\u8981\u5206\u60c5\u51b5\u8ba8\u8bba: \u6808\u4e3a\u7a7a: \u5219\u5c06\u5f53\u524d\u7d22\u5f15\u5165\u6808; \u6808\u975e\u7a7a: \u5219 i \u51cf\u53bb \u6808\u9876 \u4f5c\u4e3a\u5f53\u524d\u6709\u6548\u62ec\u53f7\u957f\u5ea6, \u5e76\u66f4\u65b0\u6700\u957f\u6709\u6548\u62ec\u53f7\u957f\u5ea6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 def longestValidParentheses ( self , s : str ) -> int : stack = [ - 1 ] # \u9884\u7f6e -1 \u4f5c\u4e3a\u53c2\u7167 res = 0 for i , c in enumerate ( s ): if c == '(' : stack . append ( i ) elif c == ')' : stack . pop () if len ( stack ): res = max ( res , i - stack [ - 1 ]) # i - stack.top() else : stack . append ( i ) # \u6808\u7a7a, \u5219\u5165\u6808\u4f5c\u4e3a\u53c2\u7167 return res \u89e3\u6cd5 2: \u52a8\u6001\u89c4\u5212 # Todo \u72b6\u6001\u5b9a\u4e49 : dp[i] dp[i] \u8868\u793a\u4ee5\u4e0b\u6807\u4e3a i \u7684\u5b57\u7b26\u7ed3\u5c3e\u7684\u6700\u957f\u6709\u6548\u62ec\u53f7\u7684\u957f\u5ea6;","title":"\u5b50\u4e32\u95ee\u9898"},{"location":"dynamic_programming/substring/#32_","text":"","title":"32_\u6700\u957f\u7684\u6709\u6548\u62ec\u53f7"},{"location":"dynamic_programming/substring/#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u53ea\u5305\u542b '(' \u548c ')' \u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u6709\u6548\uff08\u683c\u5f0f\u6b63\u786e\u4e14\u8fde\u7eed\uff09\u62ec\u53f7\u5b50\u4e32\u7684\u957f\u5ea6\u3002 \u793a\u4f8b1 \u8f93\u5165\uff1as = \") ()() )\" \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u662f \"()()\" \u793a\u4f8b2 \u8f93\u5165: \") ()() ) ()() (\" \u8f93\u51fa: 4 \u89e3\u91ca: \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u662f \" ()() \"","title":"\u9898\u76ee"},{"location":"dynamic_programming/substring/#_2","text":"","title":"\u89e3\u6790"},{"location":"greedy/","text":"\u8d2a\u5a6a\u7b97\u6cd5 # Title Difficulty Marks 55_\u8df3\u8dc3\u6e38\u620f M 406_\u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 M tree, sorting 581_\u6700\u77ed\u65e0\u5e8f\u8fde\u7eed\u5b50\u6570\u7ec4 M two-pointers 621_\u4efb\u52a1\u8c03\u5ea6\u5668 M hash-table, sorting","title":"\u6982\u89c8"},{"location":"greedy/#_1","text":"Title Difficulty Marks 55_\u8df3\u8dc3\u6e38\u620f M 406_\u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 M tree, sorting 581_\u6700\u77ed\u65e0\u5e8f\u8fde\u7eed\u5b50\u6570\u7ec4 M two-pointers 621_\u4efb\u52a1\u8c03\u5ea6\u5668 M hash-table, sorting","title":"\u8d2a\u5a6a\u7b97\u6cd5"},{"location":"hash_table/","text":"\u54c8\u5e0c\u8868 # Title Difficulty Marks 1_\u4e24\u6570\u4e4b\u548c E 49_\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4 M 136_\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 E 169_\u591a\u6570\u5143\u7d20 E 448_\u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57 E 560_\u548c\u4e3a K \u7684\u5b50\u6570\u7ec4 M","title":"\u6982\u89c8"},{"location":"hash_table/#_1","text":"Title Difficulty Marks 1_\u4e24\u6570\u4e4b\u548c E 49_\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4 M 136_\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 E 169_\u591a\u6570\u5143\u7d20 E 448_\u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57 E 560_\u548c\u4e3a K \u7684\u5b50\u6570\u7ec4 M","title":"\u54c8\u5e0c\u8868"},{"location":"hash_table/1_two_sum/","text":"two_sum #","title":"TwoSum"},{"location":"hash_table/1_two_sum/#two_sum","text":"","title":"two_sum"},{"location":"linked_list/","text":"\u94fe\u8868 # Title Difficulty Marks 2_\u4e24\u6570\u76f8\u52a0 M 19_\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9 M 21_\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 E 23_\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868 H divide-and-conquer, heap 141_\u73af\u5f62\u94fe\u8868 E two-pointers 142_\u73af\u5f62\u94fe\u8868 II M two-pointers 148_\u6392\u5e8f\u94fe\u8868 M 160_\u76f8\u4ea4\u94fe\u8868 E 206_\u53cd\u8f6c\u94fe\u8868 E 234_\u56de\u6587\u94fe\u8868 E two-pointers","title":"\u6982\u89c8"},{"location":"linked_list/#_1","text":"Title Difficulty Marks 2_\u4e24\u6570\u76f8\u52a0 M 19_\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9 M 21_\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 E 23_\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868 H divide-and-conquer, heap 141_\u73af\u5f62\u94fe\u8868 E two-pointers 142_\u73af\u5f62\u94fe\u8868 II M two-pointers 148_\u6392\u5e8f\u94fe\u8868 M 160_\u76f8\u4ea4\u94fe\u8868 E 206_\u53cd\u8f6c\u94fe\u8868 E 234_\u56de\u6587\u94fe\u8868 E two-pointers","title":"\u94fe\u8868"},{"location":"linked_list/19_remove-nth-node-from-end-of-list/","text":"\u9898\u76ee # [19] Remove Nth Node From End of List Description: Given the head of a linked list, remove the n^th node from the end of the list and return its head. \u601d\u8def # \u91c7\u7528 \u5feb\u6162\u6307\u9488\u6cd5 \uff0c\u8bbe\u7f6e\u5feb\u6307\u9488 fast \u548c\u6162\u6307\u9488 slow, \u5177\u4f53\u6b65\u9aa4\u4e3a: \u5148\u79fb\u52a8\u5feb\u6307\u9488 n n \u6b65, \u4f7f slow \u4e0e fast \u95f4\u8ddd\u4e3a n \u4e2a\u7ed3\u70b9\uff1b \u76f8\u540c\u901f\u7387\u540c\u6b65\u79fb\u52a8 slow \u548c fast, \u5f53\u5feb\u6307\u9488 fast \u79fb\u52a8\u5230\u5c3e\u7ed3\u70b9\u65f6\uff0c\u5219\u6162\u6307\u9488\u7684\u540e\u4e00\u4e2a\u7ed3\u70b9\u5373\u4e3a\u9700\u8981\u5220\u9664\u7684\u7ed3\u70b9. \u6ce8\u610f\u4e8b\u9879\u4e0e\u6280\u5de7 \u8bbe\u7f6e\u4e00\u4e2a\u7a7a\u5934\u7ed3\u70b9 dummy_head, \u907f\u514d\u5220\u9664\u7684\u7ed3\u70b9\u4e3a\u5934\u7ed3\u70b9 head \u65f6\u5bfc\u81f4\u8fd4\u56de\u51fa\u9519\uff1b \u5f53 n \u5927\u4e8e\u94fe\u8868\u957f\u5ea6\u65f6\uff0c \u8fd4\u56de NULL. \u4ee3\u7801 # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 ListNode * removeNthFromEnd ( ListNode * head , int n ) { if ( head == nullptr ) return head ; // construct dummy head auto * dummy_head = new ListNode ; dummy_head -> next = head ; ListNode * slow = dummy_head ; ListNode * fast = dummy_head ; // Spacing slow and fast with n nodes for ( int i = 0 ; i < n ; i ++ ) { if ( fast == nullptr ) return nullptr ; fast = fast -> next ; } // move fast point to the end, slow with the same speed with fast while ( fast -> next != nullptr ) { slow = slow -> next ; fast = fast -> next ; } // delete the node ListNode * tmp = slow -> next ; slow -> next = slow -> next -> next ; delete tmp ; return dummy_head -> next ; }","title":"\u8282\u70b9\u5220\u9664"},{"location":"linked_list/19_remove-nth-node-from-end-of-list/#_1","text":"[19] Remove Nth Node From End of List Description: Given the head of a linked list, remove the n^th node from the end of the list and return its head.","title":"\u9898\u76ee"},{"location":"linked_list/19_remove-nth-node-from-end-of-list/#_2","text":"\u91c7\u7528 \u5feb\u6162\u6307\u9488\u6cd5 \uff0c\u8bbe\u7f6e\u5feb\u6307\u9488 fast \u548c\u6162\u6307\u9488 slow, \u5177\u4f53\u6b65\u9aa4\u4e3a: \u5148\u79fb\u52a8\u5feb\u6307\u9488 n n \u6b65, \u4f7f slow \u4e0e fast \u95f4\u8ddd\u4e3a n \u4e2a\u7ed3\u70b9\uff1b \u76f8\u540c\u901f\u7387\u540c\u6b65\u79fb\u52a8 slow \u548c fast, \u5f53\u5feb\u6307\u9488 fast \u79fb\u52a8\u5230\u5c3e\u7ed3\u70b9\u65f6\uff0c\u5219\u6162\u6307\u9488\u7684\u540e\u4e00\u4e2a\u7ed3\u70b9\u5373\u4e3a\u9700\u8981\u5220\u9664\u7684\u7ed3\u70b9. \u6ce8\u610f\u4e8b\u9879\u4e0e\u6280\u5de7 \u8bbe\u7f6e\u4e00\u4e2a\u7a7a\u5934\u7ed3\u70b9 dummy_head, \u907f\u514d\u5220\u9664\u7684\u7ed3\u70b9\u4e3a\u5934\u7ed3\u70b9 head \u65f6\u5bfc\u81f4\u8fd4\u56de\u51fa\u9519\uff1b \u5f53 n \u5927\u4e8e\u94fe\u8868\u957f\u5ea6\u65f6\uff0c \u8fd4\u56de NULL.","title":"\u601d\u8def"},{"location":"linked_list/19_remove-nth-node-from-end-of-list/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 ListNode * removeNthFromEnd ( ListNode * head , int n ) { if ( head == nullptr ) return head ; // construct dummy head auto * dummy_head = new ListNode ; dummy_head -> next = head ; ListNode * slow = dummy_head ; ListNode * fast = dummy_head ; // Spacing slow and fast with n nodes for ( int i = 0 ; i < n ; i ++ ) { if ( fast == nullptr ) return nullptr ; fast = fast -> next ; } // move fast point to the end, slow with the same speed with fast while ( fast -> next != nullptr ) { slow = slow -> next ; fast = fast -> next ; } // delete the node ListNode * tmp = slow -> next ; slow -> next = slow -> next -> next ; delete tmp ; return dummy_head -> next ; }","title":"\u4ee3\u7801"},{"location":"linked_list/2_add_two_numbers/","text":"\u4e24\u6570\u76f8\u52a0 # \u601d\u8def # \u5b9a\u4e49\u865a\u62df\u8282\u70b9\u4f7f\u4ee3\u7801\u66f4\u7b80\u6d01\u3002 ```cpp class Solution { public: ListNode addTwoNumbers(ListNode l1, ListNode l2) { / \u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u7528\u4e8e\u5b58\u50a8\u6c42\u548c\u7684\u7ed3\u679c / ListNode dummyHead = new ListNode(0); ListNode cur = dummyHead; / \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\u7528\u4e8e\u4fdd\u5b58\u8fdb\u4f4d */ int carry = 0; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /* \u56e0\u4e3a\u4e0d\u77e5\u9053l1\u548cl2\u7684\u957f\u77ed\u6240\u4ee5\u53ea\u8981\u6709\u4e00\u4e2a\u6ca1\u6709\u904d\u5386\u5b8c\u5c31\u7ee7\u7eed\u904d\u5386, \u904d\u5386\u5b8c\u7684\u5c31\u4e0d\u6267\u884c\uff1b * \u7b2c\u4e00\u6b21\u5199while(l1||l2) \u4f1a\u9519\u56e0\u4e3a\u6f0f\u6389\u4e86\u6700\u540e\u4e00\u4e2a\u8fdb\u4f4d, \u9700\u7279\u522b\u6ce8\u610f*/ while(l1 || l2 || carry){ /* \u53ea\u8981\u4e0d\u4e3a\u7a7a\u5c31\u7ee7\u7eed\u6c42\u548c */ if(l1 != NULL) carry += l1->val; if(l2 != NULL) carry += l2->val; /* \u521b\u5efa\u4e00\u4e2a\u8282\u70b9\u63d2\u5165\u5230\u65b0\u7684\u94fe\u8868\u5e76\u4e14\u503c\u521d\u59cb\u5316\u4e3al1->val+l2->val\u7684\u4e2a\u4f4d\u6570 */ ListNode* tmp = new ListNode(carry%10); /* \u63d2\u5165\u7ed3\u70b9tmp\u56e0\u4e3a\u662f\u4ece\u5934\u5f00\u59cb\u63d2\u5165\u6240\u4ee5\u53ea\u9700\u8981\u6bcf\u6b21\u66f4\u65b0cur */ cur->next = tmp; cur = cur->next; /* \u53ea\u8981\u94fe\u8868\u4e0d\u4e3a\u7a7a\u5c31\u7ee7\u7eed\u904d\u5386\u4e0b\u4e00\u4e2a\u8282\u70b9 */ if(l1 != NULL) l1 = l1->next; if(l2 != NULL) l2 = l2->next; /* \u83b7\u53d6\u4e0a\u4e2a\u8282\u70b9\u7684\u8fdb\u4f4d\u503c \u52a0\u5230\u4e0b\u4e2a\u8282\u70b9\u7684\u8fd0\u7b97\u4e2d */ carry /= 10; } /* \u6ce8\u610f\u8fd9\u91cc\u4e0d\u8fd4\u56dedummyHead\u56e0\u4e3a\u8fd9\u91cc\u76f8\u5f53\u4e8e\u4e00\u4e2a\u865a\u62df\u5934\u8282\u70b9 \u4e0b\u4e00\u4e2a\u624d\u662f\u6b63\u771f\u7684\u5934\u8282\u70b9 */ return dummyHead->next; } };","title":"2 add two numbers"},{"location":"linked_list/2_add_two_numbers/#_1","text":"","title":"\u4e24\u6570\u76f8\u52a0"},{"location":"linked_list/2_add_two_numbers/#_2","text":"\u5b9a\u4e49\u865a\u62df\u8282\u70b9\u4f7f\u4ee3\u7801\u66f4\u7b80\u6d01\u3002 ```cpp class Solution { public: ListNode addTwoNumbers(ListNode l1, ListNode l2) { / \u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u7528\u4e8e\u5b58\u50a8\u6c42\u548c\u7684\u7ed3\u679c / ListNode dummyHead = new ListNode(0); ListNode cur = dummyHead; / \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\u7528\u4e8e\u4fdd\u5b58\u8fdb\u4f4d */ int carry = 0; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /* \u56e0\u4e3a\u4e0d\u77e5\u9053l1\u548cl2\u7684\u957f\u77ed\u6240\u4ee5\u53ea\u8981\u6709\u4e00\u4e2a\u6ca1\u6709\u904d\u5386\u5b8c\u5c31\u7ee7\u7eed\u904d\u5386, \u904d\u5386\u5b8c\u7684\u5c31\u4e0d\u6267\u884c\uff1b * \u7b2c\u4e00\u6b21\u5199while(l1||l2) \u4f1a\u9519\u56e0\u4e3a\u6f0f\u6389\u4e86\u6700\u540e\u4e00\u4e2a\u8fdb\u4f4d, \u9700\u7279\u522b\u6ce8\u610f*/ while(l1 || l2 || carry){ /* \u53ea\u8981\u4e0d\u4e3a\u7a7a\u5c31\u7ee7\u7eed\u6c42\u548c */ if(l1 != NULL) carry += l1->val; if(l2 != NULL) carry += l2->val; /* \u521b\u5efa\u4e00\u4e2a\u8282\u70b9\u63d2\u5165\u5230\u65b0\u7684\u94fe\u8868\u5e76\u4e14\u503c\u521d\u59cb\u5316\u4e3al1->val+l2->val\u7684\u4e2a\u4f4d\u6570 */ ListNode* tmp = new ListNode(carry%10); /* \u63d2\u5165\u7ed3\u70b9tmp\u56e0\u4e3a\u662f\u4ece\u5934\u5f00\u59cb\u63d2\u5165\u6240\u4ee5\u53ea\u9700\u8981\u6bcf\u6b21\u66f4\u65b0cur */ cur->next = tmp; cur = cur->next; /* \u53ea\u8981\u94fe\u8868\u4e0d\u4e3a\u7a7a\u5c31\u7ee7\u7eed\u904d\u5386\u4e0b\u4e00\u4e2a\u8282\u70b9 */ if(l1 != NULL) l1 = l1->next; if(l2 != NULL) l2 = l2->next; /* \u83b7\u53d6\u4e0a\u4e2a\u8282\u70b9\u7684\u8fdb\u4f4d\u503c \u52a0\u5230\u4e0b\u4e2a\u8282\u70b9\u7684\u8fd0\u7b97\u4e2d */ carry /= 10; } /* \u6ce8\u610f\u8fd9\u91cc\u4e0d\u8fd4\u56dedummyHead\u56e0\u4e3a\u8fd9\u91cc\u76f8\u5f53\u4e8e\u4e00\u4e2a\u865a\u62df\u5934\u8282\u70b9 \u4e0b\u4e00\u4e2a\u624d\u662f\u6b63\u771f\u7684\u5934\u8282\u70b9 */ return dummyHead->next; } };","title":"\u601d\u8def"},{"location":"others/","text":"\u5176\u4ed6 # Title Difficulty Marks 48_\u65cb\u8f6c\u56fe\u50cf M array 207_\u8bfe\u7a0b\u8868 M 238_\u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef M","title":"\u6982\u89c8"},{"location":"others/#_1","text":"Title Difficulty Marks 48_\u65cb\u8f6c\u56fe\u50cf M array 207_\u8bfe\u7a0b\u8868 M 238_\u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef M","title":"\u5176\u4ed6"},{"location":"sliding_window/","text":"\u6ed1\u7a97\u6cd5 # Title Difficulty Marks 3_\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 M two-pointers, hash-table 76_\u6700\u5c0f\u8986\u76d6\u5b50\u4e32 H two-pointers, hash-table 239_\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c H heap 438_\u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd M hash-table","title":"\u6982\u89c8"},{"location":"sliding_window/#_1","text":"Title Difficulty Marks 3_\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 M two-pointers, hash-table 76_\u6700\u5c0f\u8986\u76d6\u5b50\u4e32 H two-pointers, hash-table 239_\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c H heap 438_\u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd M hash-table","title":"\u6ed1\u7a97\u6cd5"},{"location":"sorting/","text":"\u6392\u5e8f # Title Difficulty Marks 56_\u5408\u5e76\u533a\u95f4 M 57_\u63d2\u5165\u533a\u95f4 M 347_\u524dK\u4e2a\u9ad8\u9891\u5143\u7d20 M","title":"\u6982\u89c8"},{"location":"sorting/#_1","text":"Title Difficulty Marks 56_\u5408\u5e76\u533a\u95f4 M 57_\u63d2\u5165\u533a\u95f4 M 347_\u524dK\u4e2a\u9ad8\u9891\u5143\u7d20 M","title":"\u6392\u5e8f"},{"location":"stack/","text":"\u6808 # Title Difficulty Marks 20_\u6709\u6548\u7684\u62ec\u53f7 E 84_\u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62 H 394_\u5b57\u7b26\u4e32\u89e3\u7801 M 739_\u6bcf\u65e5\u6e29\u5ea6 M","title":"\u6982\u89c8"},{"location":"stack/#_1","text":"Title Difficulty Marks 20_\u6709\u6548\u7684\u62ec\u53f7 E 84_\u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62 H 394_\u5b57\u7b26\u4e32\u89e3\u7801 M 739_\u6bcf\u65e5\u6e29\u5ea6 M","title":"\u6808"},{"location":"two_pointers/","text":"\u53cc\u6307\u9488 # Title Difficulty Marks 11_\u76db\u6c34\u6700\u591a\u7684\u5bb9\u5668 M 15_\u4e09\u6570\u4e4b\u548c M 31_\u4e0b\u4e00\u4e2a\u6392\u5217 M array 42_\u63a5\u96e8\u6c34 H stack 75_\u989c\u8272\u5206\u7c7b H sort 283_\u79fb\u52a8\u96f6 E","title":"\u6982\u89c8"},{"location":"two_pointers/#_1","text":"Title Difficulty Marks 11_\u76db\u6c34\u6700\u591a\u7684\u5bb9\u5668 M 15_\u4e09\u6570\u4e4b\u548c M 31_\u4e0b\u4e00\u4e2a\u6392\u5217 M array 42_\u63a5\u96e8\u6c34 H stack 75_\u989c\u8272\u5206\u7c7b H sort 283_\u79fb\u52a8\u96f6 E","title":"\u53cc\u6307\u9488"},{"location":"union_find/","text":"\u5e76\u67e5\u96c6 # Title Difficulty Marks 128_\u6700\u957f\u8fde\u7eed\u5e8f\u5217 M 200_\u5c9b\u5c7f\u6570\u91cf M 399_\u9664\u6cd5\u6c42\u503c M BFS, DFS","title":"\u6982\u89c8"},{"location":"union_find/#_1","text":"Title Difficulty Marks 128_\u6700\u957f\u8fde\u7eed\u5e8f\u5217 M 200_\u5c9b\u5c7f\u6570\u91cf M 399_\u9664\u6cd5\u6c42\u503c M BFS, DFS","title":"\u5e76\u67e5\u96c6"},{"location":"tags.html","text":"Contents grouped by tag #","title":"Tags"},{"location":"tags.html#contents-grouped-by-tag","text":"","title":"Contents grouped by tag"}]}